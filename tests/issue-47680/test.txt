// fn bar() {
//     let mut x: &R0 mut Thing = &R1 mut Thing;
//
//     loop {
//         let temp0 = &mut x;
//         match maybe_next(temp0) {
//             Some(v) => { x = v; }
//             None => { }
//         }
//     }
// }


// x: &x mut Thing
// temp0: &temp0 mut Thing
// match0: Option<&match0 mut Thing>
//

block A {
  // x = &B_thing mut Thing
  statement {
  }

  goto { B }
}

block B {
  // temp0 = &B_x mut *x
  statement {
    liveOnEntry(x)
    borrow(B_x as B_x)
    post(B_x: temp0)
  }

  // match0 = maybe_next::<match0>(temp0)
  statement {
    liveOnEntry(temp0)
    liveOnEntry(x)
    post(temp0: match0)
  }

  // switch match0 { C, D }
  goto { C D }
}

block C {
  // x = match0.as<Some>.0
  //
  // kills B_B because that is a borrow of `*x`,
  // and we changed what `x` refers to
  statement {
    liveOnEntry(match0)
    kill(B_x)
    post(match0: x)
  }

  goto { B }
}

block D {
  statement {
    liveOnEntry(x)
  }

  goto { B }
}
